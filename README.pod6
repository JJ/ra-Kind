=begin pod

[![Build Status](https://travis-ci.com/Kaiepi/p6-Kind.svg?branch=master)](https://travis-ci.com/Kaiepi/p6-Kind)

=head1 NAME

Kind - Typechecking based on kinds

=head1 SYNOPSIS

=begin code :lang<perl6>
use Kind;

my constant Class = Kind[Metamodel::ClassHOW];

proto sub is-class(Mu --> Bool:D)             {*}
multi sub is-class(Mu $ where Class --> True) { }
multi sub is-class(Mu --> False)              { }

say is-class Str;  # OUTPUT: True
say is-class Blob; # OUTPUT: False
=end code

=head1 DESCRIPTION

Kind is an uninstantiable parametric type that can be used to typecheck values
based off their kind. If parameterized, it may be used in a C<where> clause or
on the right-hand side of a typecheck to typecheck a value's HOW against its
type parameter.

Kind is documented. You can view the documentation for it and its methods at
any time using C<WHY>.

For examples of how to use Kind with any of Rakudo's kinds, see C<t/01-kind.t>.

=head1 METAMETHODS

=head2 method parameterize

    method ^parameterize(Kind:U $this, Mu \K --> Kind:U) { }

Mixes in a C<kind> method to C<$this> that returns C<K>, as well as an
C<ACCEPTS> method. What this does depends on C<K>; refer to the documentation
for it.

Some useful values with which to parameterize Kind are:

=item a metaclass or metarole

=begin code :lang<perl6>
# Smartmatches any class.
Kind[Metamodel::ClassHOW]
=end code

=item a junction of metaclasses or metaroles

=begin code :lang<perl6>
# Smartmatches any type that supports naming, versioning, and documenting.
Kind[Metamodel::Naming & Metamodel::Versioning & Metamodel::Documenting]
=end code

=item a block

=begin code :lang<perl6>
# Smartmatches any parametric type.
Kind[{ use nqp; nqp::hllbool(nqp::can($_, 'parameterize')) }]
=end code

=item a metaobject

=begin code :lang<perl6>
# This class' metamethods ensure only instances of it can be passed to them.
# Without Kind, any type that can typecheck as it would be possible to pass
# (see t/01-kind.t for an example of this).
class Configurable {
    my Map:D %CONFIGURATIONS{ObjAt:D};

    method ^configure(Configurable:_ $this where Kind[self], %configuration --> Map:D) {
        %CONFIGURATIONS{$this.WHAT.WHICH} := %configuration.Map
    }
    method ^configuration(Configurable:_ $this where Kind[self] --> Map:D) {
        %CONFIGURATIONS{$this.WHAT.WHICH} // Map.new
    }
}
=end code

=head1 METHODS

=head2 method ACCEPTS

    method ACCEPTS(Kind:U: Mu $checker --> Bool:D) { }

Returns C<True> if the HOW of C<$checker> smartmatches against C<Kind>'s type
parameter, otherwise returns C<False>.

If C<Kind>'s type parameter has an C<ACCEPTS> method, this will smartmatch the
HOW of C<$checker> against it; otherwise, C<Metamodel::Primitives.is_type> will
be invoked with C<$checker>'s HOW and it. Most of the time, the former will be
the case; the latter behaviour exists because it's not guaranteed C<K> will
actually have C<Mu>'s methods (this is case with Rakudo's metaroles).

=head2 method kind

    method kind(Kind:U: --> Mu) { }

If C<Kind> has been parameterized, returns its type parameter, otherwise
fails.

=head1 AUTHOR

Ben Davies (Kaiepi)

=head1 COPYRIGHT AND LICENSE

Copyright 2019 Ben Davies

This library is free software; you can redistribute it and/or modify it under the Artistic License 2.0.

=end pod
